import uniqid from "uniqid";
import { createSlice } from '@reduxjs/toolkit';

import type GameState from "~/app/types";

const initialState : GameState = {
  name: "",
	stories: {}
};

// NOTE: Leaving this chunk as a comment for later use
//
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const gameSlice = createSlice({
  name: "game",
  initialState,
  reducers: {
    makeStory(state, action) {
			const id = action.payload.id || uniqid();

      state.stories[id] = {
				id,
				name: "",
				...action.payload
			};
    },

		setStory(state, action) {
			state.stories[action.payload.id] = action.payload;
		},

		updateStory(state, action) {
			const payload = action.payload;
			let story = state.stories[payload.id];
			
			state.stories[payload.id] = {
				...story,
				...payload
			};
		},

		deleteStory(state, action) {
			delete state.stories[action.payload];
		},

		makeQuest(state, action) {
			const { story, quest } = action.payload;

			const id = quest.id || uniqid();
			state.stories[story].quests.push({
				id,
				name: "",
				...quest
			});
		}
  },

	// NOTE: for later
	//
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const {
	makeStory, setStory, updateStory, deleteStory,
	makeQuest
} = gameSlice.actions;

// NOTE: for later
//
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default gameSlice.reducer;
